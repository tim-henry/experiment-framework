import numpy as np
from PIL import Image
import random
import torch
from torchvision import datasets, transforms


class LeftOutColoredLocationMNIST(datasets.MNIST):
    # Color classes
    color_name_map = ["red", "green", "blue", "yellow", "magenta", "cyan", "purple", "lime", "orange", "white"]
    color_map = [np.array([1, 0.1, 0.1]), np.array([0.1, 1, 0.1]), np.array([0.1, 0.1, 1]),
                 np.array([1, 1, 0.1]), np.array([1, 0.1, 1]), np.array([0.1, 1, 1]),
                 np.array([0.57, 0.12, 0.71]), np.array([0.72, 0.96, 0.24]), np.array([0.96, 0.51, 0.19]),
                 np.array([1, 1, 1])]

    # Gaussian noise arguments
    mu = 0
    sigma = 50

    # pct_to_keep: percentage of possible combinations to keep between 0 and 1, rounded down to nearest multiple of 1/9
    def __init__(self, root, train=True, transform=None, target_transform=None, download=False, pct_to_keep=9, color_indices=np.arange(9)):
        super().__init__(root, train, transform, target_transform, download)
        self.combination_space_shape = (9, 9, 9)
        self.class_names = ("shape", "color", "position")
        self.name = "left_out_colored_location_mnist"
        self.color_indices = color_indices
        d = 9
        pct = pct_to_keep
        self.d = d

        self.pct_to_dict = []
        self.valid_combs = {}
        self.held_out = list({(8, 3, 2), (1, 4, 0), (1, 7, 0), (0, 2, 7), (6, 5, 3), (3, 8, 6), (4, 1, 1), (5, 3, 2), (1, 8, 6),
                (0, 8, 8), (6, 6, 7), (4, 6, 5), (5, 8, 7), (7, 5, 2), (7, 3, 2), (1, 8, 8), (8, 2, 5), (2, 3, 0),
                (2, 4, 0), (3, 4, 3), (0, 1, 6), (6, 2, 4), (5, 7, 5), (5, 1, 1), (7, 0, 5), (3, 6, 4), (2, 2, 3),
                (0, 5, 8), (4, 0, 8), (8, 1, 2), (4, 4, 3), (0, 5, 4), (6, 2, 8), (8, 1, 6), (1, 1, 4), (4, 2, 3),
                (4, 4, 1), (6, 0, 1), (3, 0, 4), (2, 5, 8), (3, 6, 8), (0, 5, 0), (6, 5, 8), (3, 7, 7), (4, 7, 5),
                (8, 3, 1), (2, 0, 6), (0, 7, 7), (3, 1, 1), (1, 7, 5), (7, 4, 4), (8, 8, 4), (2, 6, 2), (4, 1, 0),
                (5, 3, 3), (1, 2, 5), (6, 6, 0), (7, 5, 5), (0, 8, 7), (7, 5, 3), (5, 8, 4), (5, 6, 1), (3, 4, 6),
                (8, 2, 2), (1, 0, 0), (7, 6, 7), (2, 3, 7), (4, 6, 8), (5, 7, 6), (1, 0, 4), (2, 3, 3), (8, 4, 3),
                (0, 3, 2), (8, 4, 1), (5, 7, 0), (6, 1, 7), (7, 0, 2), (6, 8, 5), (3, 0, 1), (7, 7, 6), (2, 2, 6)},
            )
        self.control = list({(8, 6, 6), (0, 0, 8), (4, 7, 6), (0, 5, 7), (7, 2, 1), (3, 7, 0), (2, 5, 7), (2, 4, 8), (6, 6, 5),
                (6, 4, 8), (0, 1, 0), (5, 6, 2), (7, 8, 6), (5, 8, 3), (1, 0, 1), (7, 6, 4), (6, 2, 6), (6, 3, 7),
                (5, 6, 6), (8, 2, 7), (1, 6, 8), (1, 0, 5), (0, 0, 3), (4, 0, 4), (4, 5, 4), (6, 8, 0), (4, 4, 7),
                (2, 1, 3), (7, 1, 8), (4, 4, 5), (3, 5, 0), (4, 5, 8), (0, 3, 5), (4, 2, 1), (1, 1, 2), (2, 8, 7),
                (5, 2, 4), (8, 7, 8), (7, 2, 4), (8, 0, 7), (8, 6, 1), (5, 5, 0), (8, 3, 3), (3, 0, 6), (2, 7, 5),
                (3, 7, 1), (3, 8, 3), (2, 0, 2), (3, 8, 5), (6, 5, 0), (3, 2, 7), (0, 7, 3), (7, 6, 3), (3, 4, 4),
                (0, 4, 7), (1, 3, 4), (7, 8, 5), (8, 5, 2), (2, 3, 5), (5, 8, 2), (1, 5, 2), (1, 3, 0), (7, 8, 1),
                (5, 6, 5), (1, 0, 6), (5, 1, 6), (3, 3, 2), (2, 1, 8), (5, 4, 2), (6, 4, 3), (8, 7, 3), (6, 2, 1),
                (6, 1, 1), (2, 1, 4), (0, 3, 0), (0, 3, 6), (8, 1, 1), (7, 7, 4), (4, 2, 0), (1, 7, 8), (4, 4, 2)})

        pct_to_combs = {  # TODO move this table somewhere else
            8: {(8, 3, 2), (1, 4, 0), (1, 7, 0), (0, 2, 7), (6, 5, 3), (3, 8, 6), (4, 1, 1), (5, 3, 2), (1, 8, 6),
                (0, 8, 8), (6, 6, 7), (4, 6, 5), (5, 8, 7), (7, 5, 2), (7, 3, 2), (1, 8, 8), (8, 2, 5), (2, 3, 0),
                (2, 4, 0), (3, 4, 3), (0, 1, 6), (6, 2, 4), (5, 7, 5), (5, 1, 1), (7, 0, 5), (3, 6, 4), (2, 2, 3),
                (0, 5, 8), (4, 0, 8), (8, 1, 2), (4, 4, 3), (0, 5, 4), (6, 2, 8), (8, 1, 6), (1, 1, 4), (4, 2, 3),
                (4, 4, 1), (6, 0, 1), (3, 0, 4), (2, 5, 8), (3, 6, 8), (0, 5, 0), (6, 5, 8), (3, 7, 7), (4, 7, 5),
                (8, 3, 1), (2, 0, 6), (0, 7, 7), (3, 1, 1), (1, 7, 5), (7, 4, 4), (8, 8, 4), (2, 6, 2), (4, 1, 0),
                (5, 3, 3), (1, 2, 5), (6, 6, 0), (7, 5, 5), (0, 8, 7), (7, 5, 3), (5, 8, 4), (5, 6, 1), (3, 4, 6),
                (8, 2, 2), (1, 0, 0), (7, 6, 7), (2, 3, 7), (4, 6, 8), (5, 7, 6), (1, 0, 4), (2, 3, 3), (8, 4, 3),
                (0, 3, 2), (8, 4, 1), (5, 7, 0), (6, 1, 7), (7, 0, 2), (6, 8, 5), (3, 0, 1), (7, 7, 6), (2, 2, 6)},
            7: {(5, 2, 7), (8, 0, 4), (2, 6, 7), (0, 2, 3), (5, 5, 5), (8, 8, 7), (1, 8, 2), (0, 7, 2), (7, 5, 6),
                (3, 2, 4), (8, 5, 7), (2, 5, 5), (3, 4, 5), (0, 4, 6), (7, 5, 0), (1, 5, 3), (7, 6, 6), (4, 3, 2),
                (5, 8, 1), (4, 3, 0), (5, 1, 7), (0, 0, 7), (2, 3, 2), (1, 1, 8), (6, 4, 0), (4, 5, 0), (2, 4, 4),
                (4, 5, 2), (6, 2, 0), (0, 6, 3), (5, 7, 1), (5, 4, 1), (8, 1, 0), (4, 2, 7), (3, 0, 0), (3, 0, 2),
                (6, 8, 6), (8, 1, 8), (2, 7, 3), (4, 7, 7), (1, 7, 3), (6, 7, 3), (8, 0, 1), (6, 0, 5), (1, 4, 1),
                (7, 1, 6), (6, 3, 8), (2, 5, 2), (3, 7, 3), (7, 3, 5), (1, 2, 3), (5, 8, 8), (3, 2, 5), (7, 3, 1),
                (6, 6, 6), (0, 8, 5), (1, 0, 2), (6, 6, 4), (7, 8, 7), (7, 0, 8), (0, 3, 8), (4, 3, 3), (8, 2, 4),
                (5, 1, 4), (4, 8, 8), (0, 6, 6), (5, 1, 0), (3, 3, 4), (2, 1, 6), (0, 0, 2), (3, 4, 8), (4, 4, 8),
                (1, 1, 1), (8, 4, 5), (1, 6, 1), (3, 6, 1), (6, 7, 4), (2, 8, 6), (8, 6, 4), (2, 7, 0), (7, 2, 5)},
            6: {(0, 5, 5), (3, 0, 3), (2, 2, 4), (5, 2, 1), (8, 3, 0), (1, 7, 2), (2, 7, 6), (0, 5, 3), (4, 2, 8),
                (3, 2, 2), (7, 1, 5), (2, 6, 3), (3, 7, 2), (1, 2, 4), (1, 5, 5), (6, 5, 1), (8, 8, 1), (5, 0, 0),
                (7, 3, 6), (1, 3, 7), (4, 1, 3), (5, 3, 6), (7, 6, 0), (6, 1, 8), (0, 4, 4), (3, 4, 1), (0, 6, 5),
                (6, 7, 6), (5, 6, 8), (2, 4, 2), (4, 0, 6), (3, 3, 7), (0, 0, 1), (3, 6, 2), (4, 2, 5), (5, 4, 7),
                (4, 8, 1), (8, 4, 4), (6, 7, 7), (2, 2, 5), (4, 7, 1), (7, 1, 0), (7, 4, 0), (4, 1, 4), (8, 3, 7),
                (3, 1, 3), (6, 5, 4), (8, 8, 6), (7, 1, 4), (1, 0, 8), (5, 0, 3), (2, 5, 6), (8, 8, 0), (2, 5, 4),
                (1, 8, 7), (6, 3, 0), (8, 5, 0), (1, 8, 5), (0, 6, 8), (6, 3, 6), (7, 7, 8), (2, 3, 1), (4, 0, 1),
                (7, 8, 3), (0, 0, 6), (0, 1, 7), (8, 2, 8), (5, 7, 2), (1, 6, 5), (0, 6, 2), (8, 4, 7), (7, 7, 0),
                (4, 8, 2), (3, 6, 3), (6, 0, 8), (5, 4, 4), (6, 8, 3), (2, 2, 2), (3, 5, 7), (1, 1, 5), (5, 4, 8)},
            5: {(1, 1, 7), (3, 1, 8), (2, 8, 2), (4, 7, 4), (3, 0, 7), (0, 7, 8), (5, 0, 6), (2, 8, 8), (3, 2, 0),
                (8, 8, 5), (1, 2, 2), (2, 6, 1), (5, 0, 2), (1, 8, 0), (7, 3, 4), (4, 6, 1), (0, 7, 0), (5, 3, 0),
                (7, 5, 4), (0, 4, 0), (1, 3, 5), (6, 3, 1), (8, 2, 1), (4, 6, 7), (8, 5, 3), (2, 3, 6), (8, 7, 6),
                (5, 1, 5), (5, 0, 8), (6, 4, 6), (0, 6, 7), (0, 6, 1), (1, 6, 4), (6, 4, 2), (8, 7, 0), (0, 3, 3),
                (6, 1, 6), (2, 8, 5), (5, 4, 5), (1, 6, 2), (6, 8, 2), (2, 2, 1), (7, 7, 7), (4, 7, 3), (3, 5, 4),
                (6, 7, 1), (7, 1, 2), (8, 0, 3), (1, 4, 3), (2, 0, 4), (3, 1, 5), (7, 4, 2), (4, 1, 6), (1, 5, 8),
                (5, 0, 5), (5, 5, 8), (8, 5, 4), (7, 4, 6), (0, 4, 3), (3, 8, 7), (4, 6, 2), (5, 8, 6), (7, 3, 3),
                (4, 6, 4), (6, 2, 7), (0, 8, 1), (2, 4, 1), (8, 2, 6), (6, 1, 3), (7, 0, 0), (1, 3, 8), (6, 7, 8),
                (3, 3, 8), (3, 5, 3), (0, 0, 0), (4, 2, 4), (4, 5, 7), (2, 2, 0), (7, 2, 7), (8, 1, 5), (3, 5, 5)},
            4: {(4, 7, 0), (8, 0, 6), (1, 4, 4), (2, 7, 2), (8, 6, 0), (2, 7, 4), (2, 0, 5), (0, 5, 1), (6, 0, 2),
                (8, 6, 2), (3, 1, 4), (6, 5, 7), (7, 3, 8), (2, 0, 1), (0, 4, 8), (3, 8, 2), (4, 1, 5), (2, 5, 3),
                (0, 1, 8), (0, 8, 6), (5, 6, 0), (7, 8, 4), (8, 5, 1), (5, 8, 5), (5, 3, 4), (3, 4, 7), (1, 3, 1),
                (5, 7, 3), (8, 4, 2), (1, 6, 6), (4, 8, 3), (2, 4, 6), (3, 6, 0), (7, 2, 8), (1, 1, 0), (7, 7, 5),
                (2, 1, 1), (8, 6, 5), (6, 8, 4), (5, 2, 6), (0, 2, 0), (6, 5, 6), (0, 2, 2), (6, 0, 7), (5, 5, 4),
                (1, 7, 7), (3, 2, 3), (1, 2, 1), (8, 3, 5), (5, 2, 8), (0, 7, 5), (7, 3, 7), (1, 3, 6), (5, 3, 7),
                (7, 5, 1), (6, 3, 4), (4, 1, 8), (3, 4, 0), (0, 1, 3), (4, 0, 3), (3, 3, 0), (8, 8, 8), (3, 4, 2),
                (8, 5, 8), (7, 0, 4), (6, 2, 3), (2, 4, 5), (7, 0, 6), (4, 5, 1), (3, 6, 7), (4, 0, 5), (0, 6, 0),
                (2, 4, 7), (6, 8, 1), (7, 7, 2), (4, 2, 6), (1, 1, 3), (1, 6, 3), (5, 1, 8), (4, 7, 2), (6, 8, 7)},
            3: {(7, 2, 3), (7, 1, 1), (3, 7, 4), (8, 0, 0), (8, 3, 4), (3, 1, 2), (6, 5, 5), (7, 4, 3), (2, 0, 3),
                (0, 7, 4), (1, 7, 4), (8, 6, 8), (8, 8, 3), (2, 5, 1), (6, 6, 1), (7, 4, 7), (1, 2, 6), (3, 7, 8),
                (4, 3, 6), (0, 8, 4), (0, 1, 2), (0, 8, 2), (7, 8, 0), (6, 4, 4), (3, 3, 5), (6, 1, 0), (7, 5, 8),
                (5, 1, 3), (2, 1, 5), (1, 6, 0), (7, 7, 3), (7, 0, 3), (0, 3, 7), (4, 8, 7), (0, 2, 8), (6, 7, 5),
                (3, 5, 6), (2, 8, 1), (2, 0, 8), (7, 2, 2), (0, 5, 6), (1, 1, 6), (1, 4, 5), (3, 7, 5), (6, 0, 3),
                (3, 1, 7), (5, 2, 2), (2, 6, 6), (2, 6, 4), (5, 0, 7), (5, 5, 6), (3, 2, 1), (8, 8, 2), (6, 3, 2),
                (8, 2, 0), (1, 5, 0), (4, 6, 6), (1, 3, 2), (4, 3, 5), (2, 6, 8), (5, 8, 0), (6, 4, 7), (4, 3, 1),
                (5, 6, 7), (6, 4, 1), (8, 7, 5), (4, 0, 7), (0, 0, 4), (2, 2, 8), (5, 4, 0), (8, 7, 1), (5, 1, 2),
                (4, 5, 3), (1, 6, 7), (4, 8, 0), (3, 5, 1), (4, 4, 6), (0, 3, 4), (1, 4, 8), (8, 0, 8), (5, 2, 5)},
            2: {(8, 1, 7), (4, 2, 2), (6, 7, 0), (7, 1, 3), (5, 5, 1), (6, 7, 2), (0, 2, 1), (8, 0, 2), (5, 5, 3),
                (5, 2, 3), (3, 8, 0), (8, 3, 6), (2, 6, 5), (0, 2, 5), (4, 7, 8), (1, 2, 0), (6, 0, 6), (5, 5, 7),
                (3, 8, 4), (8, 3, 8), (2, 3, 8), (4, 6, 3), (0, 4, 2), (1, 8, 4), (1, 3, 3), (4, 3, 4), (6, 3, 5),
                (3, 3, 1), (0, 1, 4), (4, 0, 2), (5, 7, 7), (7, 8, 2), (8, 7, 4), (4, 0, 0), (8, 7, 2), (0, 0, 5),
                (3, 6, 6), (7, 0, 7), (7, 8, 8), (7, 7, 1), (7, 0, 1), (4, 5, 6), (7, 2, 6), (8, 1, 4), (2, 2, 7),
                (8, 4, 8), (1, 4, 7), (5, 2, 0), (6, 8, 8), (7, 2, 0), (3, 5, 8), (6, 6, 8), (3, 0, 8), (2, 7, 7),
                (3, 8, 1), (2, 5, 0), (1, 8, 3), (6, 6, 2), (7, 5, 7), (2, 6, 0), (1, 8, 1), (1, 5, 4), (5, 0, 1),
                (0, 7, 1), (1, 5, 6), (4, 3, 7), (0, 4, 5), (5, 6, 3), (6, 4, 5), (0, 1, 5), (0, 6, 4), (2, 4, 3),
                (3, 3, 6), (3, 6, 5), (5, 4, 6), (2, 1, 2), (6, 1, 5), (2, 1, 0), (8, 1, 3), (4, 4, 4), (1, 4, 6)},
            1: {(1, 2, 8), (2, 8, 0), (4, 4, 0), (6, 0, 0), (3, 0, 5), (1, 4, 2), (3, 1, 6), (7, 1, 7), (3, 7, 6),
                (2, 0, 7), (6, 0, 4), (7, 4, 1), (0, 7, 6), (1, 7, 6), (5, 0, 4), (7, 6, 8), (4, 1, 7), (6, 6, 3),
                (3, 1, 0), (7, 4, 5), (3, 2, 6), (8, 5, 5), (1, 5, 7), (7, 6, 2), (7, 3, 0), (1, 5, 1), (3, 2, 8),
                (2, 3, 4), (6, 3, 3), (8, 2, 3), (1, 0, 3), (5, 6, 4), (0, 8, 0), (1, 0, 7), (5, 3, 8), (3, 3, 3),
                (6, 1, 2), (6, 2, 2), (5, 4, 3), (2, 1, 7), (8, 4, 0), (0, 3, 1), (6, 1, 4), (4, 3, 8), (8, 4, 6),
                (3, 5, 2), (7, 4, 8), (4, 8, 5), (8, 6, 7), (2, 7, 1), (8, 0, 5), (2, 8, 3), (8, 6, 3), (0, 5, 2),
                (5, 5, 2), (1, 7, 1), (2, 0, 0), (0, 2, 4), (6, 5, 2), (0, 2, 6), (4, 6, 0), (4, 1, 2), (5, 3, 1),
                (8, 5, 6), (0, 4, 1), (1, 2, 7), (5, 3, 5), (7, 6, 1), (0, 1, 1), (0, 8, 3), (5, 7, 8), (8, 7, 7),
                (7, 6, 5), (6, 2, 5), (5, 7, 4), (2, 7, 8), (4, 5, 5), (2, 8, 4), (4, 8, 6), (3, 8, 8), (4, 8, 4)},
            0: {(8, 6, 6), (0, 0, 8), (4, 7, 6), (0, 5, 7), (7, 2, 1), (3, 7, 0), (2, 5, 7), (2, 4, 8), (6, 6, 5),
                (6, 4, 8), (0, 1, 0), (5, 6, 2), (7, 8, 6), (5, 8, 3), (1, 0, 1), (7, 6, 4), (6, 2, 6), (6, 3, 7),
                (5, 6, 6), (8, 2, 7), (1, 6, 8), (1, 0, 5), (0, 0, 3), (4, 0, 4), (4, 5, 4), (6, 8, 0), (4, 4, 7),
                (2, 1, 3), (7, 1, 8), (4, 4, 5), (3, 5, 0), (4, 5, 8), (0, 3, 5), (4, 2, 1), (1, 1, 2), (2, 8, 7),
                (5, 2, 4), (8, 7, 8), (7, 2, 4), (8, 0, 7), (8, 6, 1), (5, 5, 0), (8, 3, 3), (3, 0, 6), (2, 7, 5),
                (3, 7, 1), (3, 8, 3), (2, 0, 2), (3, 8, 5), (6, 5, 0), (3, 2, 7), (0, 7, 3), (7, 6, 3), (3, 4, 4),
                (0, 4, 7), (1, 3, 4), (7, 8, 5), (8, 5, 2), (2, 3, 5), (5, 8, 2), (1, 5, 2), (1, 3, 0), (7, 8, 1),
                (5, 6, 5), (1, 0, 6), (5, 1, 6), (3, 3, 2), (2, 1, 8), (5, 4, 2), (6, 4, 3), (8, 7, 3), (6, 2, 1),
                (6, 1, 1), (2, 1, 4), (0, 3, 0), (0, 3, 6), (8, 1, 1), (7, 7, 4), (4, 2, 0), (1, 7, 8), (4, 4, 2)}}

        for keep_pct in range(pct):
            for shape, color, loc in pct_to_combs[keep_pct]:
                if shape not in self.valid_combs:
                    self.valid_combs[shape] = {}
                if color not in self.valid_combs[shape]:
                    self.valid_combs[shape][color] = []
                self.valid_combs[shape][color].append(loc)

    def __getitem__(self, index):
        """
        Args:
            index (int): Index

        Returns:
            tuple: (image, target) where target is index of the target class.
        """
        if self.train:
            img, target = self.train_data[index], self.train_labels[index]
        else:
            img, target = self.test_data[index], self.test_labels[index]

        # Get valid color, location
        shape_class = target.item()
        color_class = random.choice(list(self.valid_combs[shape_class].keys()))
        loc_class = random.choice(list(self.valid_combs[shape_class][color_class]))

        # Put grayscale image in RGB space
        img_array = np.stack((img.numpy(),) * 3, axis=-1)

        # Determine image size
        size = 9

        print(img_array.shape)
        img = Image.fromarray(img_array)
        img.thumbnail((size, size))
        img_array = np.zeros((28, 28, 3))

        # Adjust image location
        vert_loc_class = int(loc_class / 3)
        horiz_loc_class = loc_class % 3

        vert_offset = vert_loc_class * size
        horiz_offset = horiz_loc_class * size

        img_array[vert_offset:(vert_offset + size), horiz_offset:(horiz_offset + size), :] = np.array(img)
        img_array = img_array.astype(dtype=np.uint8)

        # Color image
        img_array = img_array * self.color_map[self.color_indices[color_class]]

        # Add Gaussian noise
        noise = np.reshape(np.random.normal(self.mu, self.sigma, img_array.size), img_array.shape)
        mask = (img_array != 0).astype("uint8")
        img_array = img_array + np.multiply(mask, noise)
        img_array = np.clip(img_array, 0, 255)
        img_array = img_array.astype("uint8")

        # 28x28 to 32x32
        zeros = np.zeros((img_array.shape[0] + 4, img_array.shape[1] + 4, img_array.shape[2]), dtype="uint8")
        zeros[2:img_array.shape[0] + 2, 2:img_array.shape[1] + 2, :] = img_array
        img_array = zeros

        img = Image.fromarray(img_array)

        # Perform any non-color transformations
        if self.transform is not None:
            img = self.transform(img)

        if self.target_transform is not None:
            target = self.target_transform(target)

        return transforms.ToTensor()(img), torch.tensor([target.item(), color_class, loc_class])
